{"version":3,"sources":["../src/datasource.js"],"names":["_","$","moment","dateMath","SolrDatasource","instanceSettings","$q","backendSrv","templateSrv","url","endsWith","substr","length","basicAuth","withCredentials","name","solrCollection","jsonData","solrCloudMode","_request","options","method","inspect","headers","datasourceRequest","doRequest","then","response","status","message","title","queryOptions","self","targetPromises","targets","filter","target","hide","map","collection","time","groupEnabled","groupByField","rows","q","replace","scopedVars","queryBuilder","query","fq","range","from","toJSON","to","fl","fields","sort","group","groupLimit","requestOptions","params","bind","convertResponse","value","all","convertedResponses","result","data","convertedResponse","flatten","mapToTextValue","facetFields","collections","text","facet_counts","ar","key","facet_fields","hasOwnProperty","array","i","push","expandable","split","field","seriesList","series","docs","forEach","item","property","ts","utc","unix","datapoints","reverse","groupBy","responseHeader","grouped","groups","groupValue","doclist","t","convertResponseUngrouped","convertResponseGrouped","annotation","baseQuery","timeField","tagsField","titleField","textField","start","toISOString","end","limit","doc","valueOf","tags"],"mappings":"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","file":"datasource.js","sourcesContent":["// Copyright 2018 PUE.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport _ from 'lodash';\nimport * as $ from 'jquery';\nimport moment from 'moment';\nimport * as dateMath from 'app/core/utils/datemath';\n\n/** @ngInject */\nexport class SolrDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.url = instanceSettings.url;\n    if (this.url.endsWith('/')) {\n      this.url = this.url.substr(0, this.url.length - 1);\n    }\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.name = instanceSettings.name;\n    //this.collection = instanceSettings.jsonData.collection;\n    this.$q = $q;\n    this.templateSrv = templateSrv;\n    this.backendSrv = backendSrv;\n    this.solrCollection = instanceSettings.jsonData.solrCollection;\n    this.solrCloudMode = instanceSettings.jsonData.solrCloudMode;\n\n    // Helper to make API requests to Solr. To avoid CORS issues, the requests may be proxied\n    // through Grafana's backend via `backendSrv.datasourceRequest`.\n    this._request = function (options) {\n      options.url = this.url + options.url;\n      options.method = options.method || 'GET';\n      options.inspect = {\n        'type': 'solr'\n      };\n\n      if (this.basicAuth) {\n        options.withCredentials = true;\n        options.headers = {\n          \"Authorization\": this.basicAuth\n        };\n      }\n\n      return backendSrv.datasourceRequest(options);\n    };\n  }\n\n  // Test the connection to Solr by querying collection response.\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return {\n          status: \"success\",\n          message: \"Data source is working\",\n          title: \"Success\"\n        };\n      } else {\n        return {\n          status: \"error\",\n          message: \"Data source is NOT working\",\n          title: \"Error\"\n        };\n      }\n    });\n  }\n\n  // Query for metric targets within the specified time range.\n  // Returns the promise of a result dictionary.\n  query(queryOptions) {\n    //console.log('QUERY: ' + JSON.stringify(queryOptions));\n    var self = this;\n\n    var targetPromises = _(queryOptions.targets)\n      .filter(function (target) {\n        return target.target && !target.hide;\n      })\n      .map(function (target) {\n        if (!target.collection || !target.time) {\n          return [];\n        }\n        if (target.groupEnabled === 'group' && !target.groupByField) {\n          return [];\n        }\n        //var url = '/api/v' + self.apiVersion + '/timeseries';\n        //fq=time:[2018-01-24T02:59:10.000Z TO 2018-01-24T14:59:10.000Z]\n        var url = '/solr/' + target.collection + '/select?wt=json';\n        //var rows = queryOptions.maxDataPoints || '100000';\n        var rows = 100000;\n        var q = self.templateSrv.replace(target.target, queryOptions.scopedVars);\n        q = self.queryBuilder(q);\n        var query = {\n          //query: templateSrv.replace(target.target, queryOptions.scopedVars),\n          fq: target.time + ':[' + queryOptions.range.from.toJSON() + ' TO ' + queryOptions.range.to.toJSON() + ']',\n          q: q,\n          fl: target.time + ',' + target.fields,\n          rows: rows,\n          sort: target.time + ' desc'\n          //from: queryOptions.range.from.toJSON(),\n          //to: queryOptions.range.to.toJSON(),\n        };\n        if (target.groupEnabled === 'group') {\n          query.group = true;\n          query['group.field'] = target.groupByField;\n          self.groupByField = target.groupByField;\n          query['group.limit'] = target.groupLimit;\n        }\n\n        self.time = target.time;\n\n        var requestOptions;\n\n        requestOptions = {\n          method: 'GET',\n          url: url,\n          params: query\n        };\n\n        return self._request(requestOptions).then(_.bind(self.convertResponse, self));\n      })\n      .value();\n\n    return this.$q.all(targetPromises).then(function (convertedResponses) {\n      var result = {\n        data: _.map(convertedResponses, function (convertedResponse) {\n          return convertedResponse.data;\n        })\n      };\n      result.data = _.flatten(result.data);\n      //console.log('RESULT: ' + JSON.stringify(result));\n      return result;\n    });\n  }\n\n  queryBuilder(query) {\n    return query.replace(/{/g, '(').replace(/}/g, ')').replace(/,/g, ' OR ');\n  }\n\n  getOptions(query) {\n    return [];\n  }\n\n  listCollections(query) {\n    // solr/admin/collections?action=LIST&wt=json\n    if (!this.solrCloudMode) {\n      return [];\n    }\n    var url = this.url + '/solr/admin/collections?action=LIST&wt=json';\n    var requestOptions;\n\n    requestOptions = {\n      method: 'GET',\n      url: url\n    };\n\n    return this.doRequest(requestOptions).then(this.mapToTextValue);\n  }\n\n  listFields(query, collection) {\n    // solr/admin/collections?action=LIST&wt=json\n    if (!collection) {\n      return [];\n    }\n    var url = this.url + '/solr/' + collection + '/select?q=*:*&wt=csv&rows=1';\n    var requestOptions;\n\n    requestOptions = {\n      method: 'GET',\n      url: url\n    };\n\n    return this.doRequest(requestOptions).then(this.mapToTextValue);\n  }\n\n  metricFindQuery(query) {\n    //q=*:*&facet=true&facet.field=CR&facet.field=product_type&facet.field=provincia&wt=json&rows=0\n    if (!this.solrCollection) {\n      return [];\n    }\n    var facetFields = query;\n    var url = this.url + '/solr/' + this.solrCollection + '/select?q=*:*&facet=true&facet.field=' + facetFields + '&wt=json&rows=0';\n\n    return this.doRequest({\n      url: url,\n      method: 'GET',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    if (result.data.collections) {\n      return result.data.collections.map(function (collection) {\n        return {\n          text: collection,\n          value: collection\n        };\n      });\n    }\n    if (result.data.facet_counts) {\n      var ar = [];\n      for (var key in result.data.facet_counts.facet_fields) {\n        if (result.data.facet_counts.facet_fields.hasOwnProperty(key)) {\n          var array = result.data.facet_counts.facet_fields[key];\n          for (var i = 0; i < array.length; i += 2) { // take every second element\n            ar.push({\n              text: array[i],\n              expandable: false\n            });\n          }\n        }\n      }\n      return ar;\n    }\n    if (result.data) {\n      return result.data.split('\\n')[0].split(',').map(function (field) {\n        return {\n          text: field,\n          value: field\n        };\n      });\n    }\n  }\n\n  convertResponseUngrouped(response) {\n    var data = response.data;\n    var seriesList = [];\n    var series = {};\n    var self = this;\n    _(data.response.docs).forEach(function (item) {\n      for (var property in item) {\n        if (item.hasOwnProperty(property) && property != self.time) {\n          // do stuff\n          if (typeof (series[property]) === 'undefined') {\n            series[property] = [];\n          }\n          var ts = moment.utc(item[self.time]).unix() * 1000;\n          series[property].push([item[property] || 0, ts]);\n        }\n      }\n    });\n    for (var property in series) {\n      seriesList.push({\n        target: property,\n        datapoints: series[property].reverse()\n      });\n    }\n    return {\n      data: seriesList\n    };\n  }\n\n  convertResponseGrouped(response) {\n    var data = response.data;\n    var groupBy = data.responseHeader.params['group.field'];\n    var seriesList = [];\n    // Recover the timestamp variable used for filtering\n    var time = response.data.responseHeader.params.fl.split(',')[0];\n    _(data.grouped[groupBy].groups).forEach(function (item) {\n      var target = item.groupValue || 'N/A';\n      var datapoints = [];\n      for (var i = 0; i < item.doclist.docs.length; i++) {\n        for (var property in item.doclist.docs[i]) {\n          if (item.doclist.docs[i].hasOwnProperty(property) && property != time) {\n            var t = moment.utc(item.doclist.docs[i][time]).unix() * 1000;\n            datapoints.push([item.doclist.docs[i][property], t]);\n          }\n        }\n      }\n      seriesList.push({\n        target: target,\n        datapoints: datapoints.reverse()\n      });\n    });\n    return {\n      data: seriesList\n    };\n  }\n\n  convertResponse(response) {\n\n    var data = response.data;\n\n    if (!data) {\n      return [];\n    }\n\n    if (data.response) {\n      return this.convertResponseUngrouped(response);\n    }\n\n    if (data.grouped) {\n      return this.convertResponseGrouped(response);\n    }\n\n    return [];\n  }\n\n  annotationQuery(options) {\n    const annotation = options.annotation;\n    const baseQuery = this.templateSrv.replace(annotation.query, {}, \"glob\") || \"*:*\";\n    const timeField = annotation.timeField || \"timestamp_dt\";\n    const collection = annotation.collection || \"annotations\";\n    const tagsField = annotation.tagsField || \"tags\";\n    const titleField = annotation.titleField || \"desc\";\n    const textField = annotation.textField || null;\n    const start = options.range.from.toISOString();\n    const end = options.range.to.toISOString();\n    const query = {\n      q: `${baseQuery} AND ${timeField}:[${start} TO ${end}]`,\n      limit: 10\n    };\n\n    var url = this.url + '/solr/' + collection + '/select?wt=json&defType=edismax';\n\n    var requestOptions;\n\n    requestOptions = {\n      method: 'GET',\n      url: url,\n      params: query\n    };\n\n    return this.doRequest(requestOptions).then((result) => {\n      return _.map(result.data.response.docs, (doc) => {\n        return {\n          annotation: annotation,\n          time: moment(doc[timeField]).valueOf(),\n          title: doc[titleField],\n          tags: doc[tagsField],\n          text: doc[textField]\n        };\n      });\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n    if (this.basicAuth) {\n      options.withCredentials = true;\n      options.headers = {\n        \"Authorization\": this.basicAuth\n      };\n    }\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n}"]}